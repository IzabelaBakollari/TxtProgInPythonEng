Листе
=====

Од колекција смо до сада поменули торку и опсег, а видели смо да и стринг може да се користи као колекција. Још једна веома важна и често коришћена врста колекција је листа.

Листе и торке
-------------

Листе, као и торке, могу да се задају набрајањем елемената, уз разлику да се елементи листе пишу између угластих заграда:

.. activecode:: console__collections_list1_srp

    for x in [2, 5, 8, 3]:
        print(x)
        
Листе су по много чему сличне торкама. Све што смо од особина торки поменули у поглављу о колекцијама, важи и за листе:

- Листа се такође може сместити у променљиву и обрнуто - елементи листе се могу доделити одговарајућем броју променљивих (другим речима, листа се може спаковати и распаковати)
- елементима листе се може приступити помоћу имена листе и редног броја (индекса) елемента написаног у угластим заградама
- дужина листе се добија функцијом *len*

.. activecode:: console__collections_list2_srp

    imena = ["Драган", "Бранко", "Светлана", "Мирко"]
    a, b, c, d = imena
    print("b =", b)
    print("imena[0] =", imena[0])
    print("len(imena) =", len(imena))
    
Листе имају и неке особине које их разликују од торки. На пример, листе се могу продужавати помоћу функције *append*:
    
.. activecode:: console__collections_list_append_srp

    a = []
    a.append(3)
    a.append(7)
    a.append(2)
    
    for x in a:
        print(x)
    
Такође, елементи листе могу да мењају своје вредности и могу да се избацују из листе:

.. activecode:: console__collections_list_mutable_srp

    a = [3, 7, 2]
    print("Почетна листа:")
    for x in a:
        print(x)
        
    a[0] = 5
    print("Измењена листа:")
    for x in a:
        print(x)

    del a[1]
    print("Скраћена листа:")
    for x in a:
        print(x)

Овакве операције са торкама нису могуће. Једном направљена торка остаје таква док постоји. Торка као вредност не може да се модификује - не може мењати своју дужину нити вредности појединих елемената. Променљива која садржи торку може само да добије целу нову торку као вредност, али тиме претходна торка није модификована, него је престала да постоји. Зато за торке кажемо да су непроменљиве (имутабилне).

Торке можемо да користимо за колекције података које не намеравамо да мењамо током извршавања програма (можемо их мењати ручно пре извршавања програма). На тај начин обезбеђујемо да се подаци неће променити случајно, а и програм ће радити нешто ефикасније са торком него што би радио са листом.

У току рада програма торка *t* се може конвертовати у листу *a* и обрнуто: ``a = list(t)`` односно ``t = tuple(a)``, али овакве конверзије су веома ретко потребне и боље их је избегавати (ако се често примењују на великим колекцијама, овакве конверзије могу значајно да успоре програм).


.. commented out 

    Предност листи у односу на торке је очигледна, листе су флексибилније јер могу да се мењају. Ипак, и торке имају својих предности и разлог постојања. Овде се не можемо упуштати у детаље, али поменимо за сада да је рад са торкама нешто ефикаснији него рад са листама, а постоје и примене у којима листе не могу да се користе уместо торки. 

    Можемо се запитати како да изаберемо да ли да у неком задатку користимо торку или листу. Ради одлуке је за сада довољно знати ово:

    - За колекцију која ће у току рада програма мењати дужину или вредности појединих елемената, морамо да користимо листу. 
    - За колекцију која се након формирања не мења у програму, можемо да бирамо листу или торку (малу предност можемо да дамо торкама)
    - У сваком тренутку је могућа конверзија торке *t* у листу *a* и обрнуто: ``a = list(t)`` односно ``t = tuple(a)`` (у случају веома дугачких колекција треба избегавати овакве конверзије).


Формирање листе
---------------

Листе можемо једноставно и ефикасно да постепено градимо у програму. На пример, ако је дата торка бројева из које желимо да у листу пребацимо оне који су већи од нуле (да бисмо са њима наставили да рачунамо), то можемо да урадимо овако:

.. activecode:: console__collections_list_create_srp

    brojevi  = (2, 5, -2, 1, -3, 4, -7, 3)
    pozitivni = []
    for x in brojevi:
        if x > 0:
            pozitivni.append(x)
            
    for x in pozitivni:
        print(x)

На почетку имамо празну листу, а онда у петљи користимо функцију *append* да бисмо додали у листу елементе које желимо.


Учитавање листе
---------------

На потпуно исти начин можемо да формирамо листу од података који се учитавају: 

.. activecode:: console__collections_list_read1_srp

    a = []
    n = int(input("Колико елемената треба учитати: "))
    for i in range(n):
        x = float(input("Унесите елемент: "))
        a.append(x)

    print("Елементи листе су:")
    for x in a:
        print(x)

Други начин да учитамо листу је да прво формирамо листу потребне дужине, а онда да у петљи учитане вредности додељујемо директно елементима листе. 

.. activecode:: console__collections_list_read2_srp

    n = int(input("Колико елемената треба учитати: "))
    a = [0] * n
    for i in range(n):
        a[i] = float(input("Унесите елемент: "))

    print("Елементи листе су:")
    for x in a:
        print(x)

Користили смо наредбу ``a = [0] * n`` којом се формира листа од *n* елемената. Операција ``[0] * n`` се назива умножавање (мултиплицирање) листе. Резултат умножавања листе је *n* надовезаних датих листи. На пример [0] * 5 је листа [0, 0, 0, 0, 0], а [2, 7] * 3 је листа [2, 7, 2, 7, 2, 7].


Ако корисник уноси све елементе листе у једном реду раздвојене размацима, програм пишемо овако:

.. activecode:: console__collections_list_read_line_srp

    a_str = input("Унесите све елементе: ")
    a = []
    for s in a_str.split():
        a.append(s)

    print("Елементи листе су:")
    for x in a:
        print(x)

За растављање унетог текста на краће стрингове који садрже појединачне бројеве употребили смо функцију *split()*. 

.. infonote::

    Funkcija *split()*:
    
    Параметар функције *split()* је знак или текст који желимо да користимо као раздвајач (сепаратор). Ако не наведемо сепаратор, подразумева се размак.
    
    :code:`"1234 56".split() -> ["1234", "56"]`
    
    :code:`"1234,6".split(',') -> ["1234", "56"]`
    
    Резултат функције  *split()* је листа стрингова. Број краћих стрингова које ћемо као резултат добити, зависи од броја и распореда знакова - раздвајача у полазном стрингу. На пример, ако текст садржи само један знак за раздвајање негде у средини, добићемо два краћа стринга. Сваки нови знак за раздвајање може произвести стринг више у резултату (ако заиста одваја неки део полазног стринга од остатка текста).
    
    :code:`"1;23;456;7".split(';') -> ["1", "23", "456", "7"]`
    
    :code:`" 1  234    56 7 ".split() -> ["1", "234", "56", "7"]`
    


Примери и задаци
''''''''''''''''

.. questionnote::

    **Пример - продаје**
    
    На почетку скрипте су дате вредности неколико продаја у једној продавници. Издвојити у листу продаје које су по вредности веће од 1000, а мање или једнаке 4000, а затим их исписати.

.. activecode:: console__collections_list_sales_srp

    prodaje = (241, 5372, 1278, 9335, 2438, 127, 529, 6027)
    donja_granica = 1000
    gornja_granica = 4000
    # dovrsite program

Задатак решавамо овако:

.. activecode:: console__collections_list_sales_sol_srp

    prodaje = (241, 5372, 1278, 9335, 2438, 127, 529, 6027)
    donja_granica = 1000
    gornja_granica = 4000

    trazene_prodaje = []
    for vrednost in prodaje:
        if vrednost > donja_granica and vrednost <= gornja_granica:
            trazene_prodaje.append(vrednost)

    print('Тражене продаје:')
    for vrednost in trazene_prodaje:
        print(vrednost)


.. questionnote::

    **Пример - Нагле промене**
    
    Дата је торка бројева. Издвојити у листу бројеве који се од својих претходника разликују бар за 10, а затим их исписати.

.. activecode:: console__collections_list_increasing_srp

    brojevi = (5, 7, 9, 11, 22, 18, 15, 13, 36, 31, 27, 14, 13, 20)
    # dovrsite program

Једно могуће решење је:

.. activecode:: console__collections_list_increasing_sol_srp

    brojevi = (5, 7, 9, 11, 22, 18, 15, 13, 36, 31, 27, 14, 13, 20)
    nagle_promene = []
    
    for i in range(1, len(brojevi)):
        if abs(brojevi[i] - brojevi[i-1]) >= 10:
            nagle_promene.append(brojevi[i])

    print('Нагле промене:')
    for x in nagle_promene:
        print(x)





.. questionnote::

    **Задатак - парни бројеви**
    
    Дата је торка бројева. Издвојити у листу бројеве који су парни, а затим их исписати.
    
    Подсетимо се, број *x* је паран ако је :math:`x \% 2 == 0`

.. activecode:: console__collections_list_even_srp

    a = (35, 12, 32, 17, 64, 98, 77, 46, 9)
    parni = []
    
.. commented out

    for x in a:
        if x % 2 == 0:
            parni.append(x)

    print('Парни бројеви:')
    for x in parni:
        print(x)




.. questionnote::

    **Задатак - свака трећа реч**
    
    Дата је торка стрингова. Издвојити у листу стрингове **чији индекси** су дељиви са 3, а затим их исписати.
    
.. activecode:: console__collections_list_every_third_srp

    reci = ('Преко', 'ограде', 'од', 'трња', 'поглед', 'иде', 'до', 'плаинина', 'и', 'звезда', 'на', 'небу')
    svaka_treca = []
    
.. commented out

    for i in range(len(reci)):
        if i % 3 == 0:
            svaka_treca.append(reci[i])

    print('Свака трећа реч:')
    for rec in svaka_treca:
        print(rec)




.. questionnote::

    **Задатак - испод нуле**
    
    Дата је торка бројева. Издвојити у листу бројеве који су негативни, а њихови претходници позитивни, а затим исписати издвојене бројеве.
    
.. activecode:: console__collections_list_neg_after_pos_srp

    a = (1, -2, 3, 5, -4, -1, -3, 2, -7)
    izdvojeni = []
    
.. commented out

    for i in range(1, len(a)):
        if a[i] < 0 and a[i - 1] > 0:
            izdvojeni.append(a[i])

    for x in izdvojeni:
        print(x)
