Математичке функције
====================

У програмирању стално користимо функције. На пример, *print()*, *input()*, *int()*, *float()* и *str()* су функције језика Пајтон, које смо до сада већ користили. У пајтону постоје и многе друге функције, а међу њима и велики број оних које се користе у математици. Неке од једноставнијих математичких функција ћемо видети у наставку.

Функције *abs()*, *min()* и *max()*
-----------------------------------

Функције *abs()*, *min()* и *max()* се често користе у рачунским задацима. Вероватно сте их негде већ користили, па ћемо их објаснити само укратко:

- функција *abs()* враћа апсолутну вредност бројчаног израза који јој се проследи као аргумент (апсолутна вредност броја се добија када се одбаци знак броја, видети пример испод);
- функција *min()* може имати два или више бројчаних аргумената, а враћа вредност најмањег од њих;
- функција *max()* може имати два или више бројчаних аргумената, а враћа вредност највећег од њих;

Ево како изгледа употреба ових функција у програму:

.. activecode:: console__numberfunc_absminmax_example_srp

    print("abs(3) =", abs(3))
    print("abs(-7) =", abs(-7))
    print("abs(-5 - -2) =", abs(-5 - -2))
    print("min(5, 2, 7, 3) =", min(5, 2, 7, 3))
    print("max(5, 2, 7, 3) =", max(5, 2, 7, 3))

Функције *abs()*, *min()* и *max()* - питања
--------------------------------------------

Проверите разумевање горе поменутих функција:

.. mchoice:: console__numberfunc_min_srp
   :answer_a: 10
   :answer_b: 20
   :answer_c: 30
   :correct: a
   :feedback_a: Тачно!
   :feedback_b: Функција min враћа најмању од вредности које јој се проследе као аргументи.
   :feedback_c: Функција min враћа најмању од вредности које јој се проследе као аргументи.
		
   Која је вредност израза ``min(10, 20, 30)``?

.. mchoice:: console__numberfunc_max_srp
   :answer_a: 10
   :answer_b: 20
   :answer_c: 30
   :correct: c
   :feedback_a: Функција max враћа највећу од вредности које јој се проследе као аргументи.
   :feedback_b: Функција max враћа највећу од вредности које јој се проследе као аргументи.
   :feedback_c: Тачно!
		
   Која је вредност израза ``max(10, 20, 30)``?

.. dragndrop:: console__numberfunc_max_0x100_srp
    :feedback: Покушај поново!
    :match_1: вредност израза је 0 ||| ако је x мање од нуле
    :match_2: вредност израза је x ||| ако је x између 0 и 100
    :match_3: вредност израза је 100 ||| ако је x веће од 100
    
    Упарите вредности израза ``min(100, max(0, x))`` са условима за x.

.. dragndrop:: console__numberfunc_max_0x_srp
    :feedback: Покушај поново!
    :match_1: abs(x)||| x ако је x веће од нуле, а -x иначе
    :match_2: max(0, x)||| x ако је x позитивно, а нула иначе
    :match_3: min(0, x)||| x ако је x негативно, а нула иначе
    :match_4: min(0, abs(x))||| увек нула
		
    Упарите изразе са њиховим вредностима.

Функције за заокруживање вредности
----------------------------------

Заокруживање реалне вредности на цео број је операција која нам је такође често потребна. Већ смо видели да конверзијом реалног броја у цео вршимо заокруживање ка нули. Постоји још неколико функција помоћу којих у Пајтону можемо да закоружимо реалан број на разликите начине:

- функција *round()* враћа цео број најближи вредности аргумента (резтултат је целобројног типа);
- функција *floor()* враћа најближи цео број, мањи или једнак вредности аргумента (резтултат је реалног типа);
- функција *ceil()* враћа најближи цео број, већи или једнак вредности аргумента (резтултат је реалног типа);

Покрените следећи програм да бисте видели како раде ове функције и да бисте их упоредили.

.. activecode:: console__numberfunc_rounding_example_srp

    import math
    
    print("round(56.234) =", round(56.234))
    print("round(56.789) =", round(56.789))

    print("math.floor(56.234) =", math.floor(56.234))
    print("math.floor(56.789) =", math.floor(56.789))

    print("math.ceil(56.234) =", math.ceil(56.234))
    print("math.ceil(56.789) =", math.ceil(56.789))


Примећујемо да су функције *floor* и *ceil* по нечему различите од функције *round* и свих претходних функција - испред њиховог имена у програму пише ``math.``. То је зато што су ове функције дефинисане у модулу који се зове *math*. Модули су програмске целине које садрже разне функције, константе и друге делове кода које можемо да користимо у нашим програмима. Тако и модул *math* поред функција *floor* и *ceil* садржи и многе друге функције. На пример, позната константа пи се може користити као *math.pi*, а функција квадратни корен као *math.sqrt* (овде их нећемо користити).

Да бисмо могли да користимо функције модула *math*, потребно је да овај модул прикључимо нашем програму. То смо урадили пишући ``import math`` на почетку програма. Тиме смо наравно омогућили коришћење и свих других математичких функција и свега другог што је дефинисано у овом модулу.

За фукцију *round* и све претходне функције није потребно прикључивати никакав посебан модул, јер су те функције уграђене у сам језик Пајтон, тако да су нам увек директно на располагању.

Функције за заокруживање вредности - питања
-------------------------------------------

Проверите разумевање функција објашњених у овој лекцији:

.. mchoice:: console__numberfunc_abs_round_srp
   :answer_a: -2
   :answer_b: 2
   :answer_c: -3
   :answer_d: 3
   :correct: d
   :feedback_a: Прочитајте поново објашњења функција abs и round.
   :feedback_b: Функција round враћа најближи цео број.
   :feedback_c: Функција abs враћа апсолутну вредност броја, која је увек већа или једнака нули.
   :feedback_d: Тачно!
		
   Која је вредност израза ``abs(round(-2.7))``?
   
.. mchoice:: console__numberfunc_max_abs_srp
   :answer_a: max(x, round(x))
   :answer_b: max(x)
   :answer_c: round(x)
   :answer_d: abs(x)
   :correct: a
   :feedback_a: Тачно!
   :feedback_b: Функција max треба да има бар два аргумента.
   :feedback_c: На овај начин износ може и да се смањи.
   :feedback_d: Износ је већ позитиван, функцијом abs се овде ништа не постиже.
		
   Један касир заокружује рачун на најближи цео број само ако се тиме износ повећава, у противном пријављује износ какав јесте. Коју формулу примењује тај касир (x је полазна вредност рачуна)?

.. dragndrop:: console__numberfunc_rounding_srp
    :feedback: Покушајте поново!
    :match_1: ка нули|||int()
    :match_2: ка ближем целом броју|||round()
    :match_3: ка мањем целом броју|||floor()
    :match_4: ка већем целом броју|||ceil()

    Упарите функције за заокруживање са начином заокруживања.

.. questionnote::

    **Задатак за радознале** - функција *round*
    
    Функција *round* може да се позове и са два аргумента (ми је иначе нећемо тако користити), где је други аргумент обично мали цео број. Проверите на пример колико је :math:`round(123.23456, 2)`, :math:`round(123.23456, 3)` и :math:`round(123.23456, -1)`. Можете да користите простор испод за помоћни програм.
    
    Покушајте да објасните чему служи други аргумент функције *round*, када се функција позове са два аргумента.
    
.. activecode:: console__numberfunc_round2_srp


