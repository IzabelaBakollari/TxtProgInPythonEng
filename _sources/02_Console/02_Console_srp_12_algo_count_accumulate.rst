Бројање и сумирање
==================

Врло је чест случај да нас из колекције података интересују само неки. Овде ћемо вежбати како да пребројимо и по потреби саберемо податке који нас интересују, односно који испуњавају неки услов.

Бројање
-------

Програм (алгоритам) помоћу кога пребројавамо елементе колекције који испуњавају дати услов у општем облику изгледа овако:

.. code::

    br = 0
    for x in kolekcija:
        if (x ispunjava uslov):
            br += 1
    print(br)
    
.. infonote::

    Наредба ``x += a`` повећава вредност променљиве *x* за *a*. То је у ствари скраћени запис наредбе :code:`x = x + a`, која променљивој *x* додељује вредност *x + a*. 

    Наредба ``x -= a`` смањује вредност променљиве *x* за *a*. То је скраћени запис наредбе :code:`x = x - a`, која променљивој *x* додељује вредност *x - a*. 
    
У нашем примеру, наредба *br += 1* повећава вредност променљиве *br* за 1.

Примери и задаци
''''''''''''''''

.. questionnote::

    **Пример - састанак:** 
    
    Вођа тима је понудио два термина за састанак који треба да се одржи сутра. Сваки члан тима је уписао у табелу који термин би му више одговарао (1 за први термин, 2 за други). Ти подаци су пребачени у први ред програма.

    Довршити програм - скрипту, тако да за дате податке о гласању чланова тима одговара колико их је гласало за први, а колико за други термин.
    
.. activecode:: console__counting_meeting_srp

    termini = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)
    
Можемо на пример да пребројимо колико чланова тима је гласало за први термин, а остале да израчунамо на крају.

.. activecode:: console__counting_meeting_sol1_srp

    termini = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)

    br_prvi_termin = 0
    for t in termini:
        if t == 1:
            br_prvi_termin += 1
            
    br_drugi_termin = len(termini) - br_prvi_termin

    print('За први термин је гласало', br_prvi_termin, 'а за други', br_drugi_termin, 'чланова тима.')

Други начин је да бројимо упоредо гласове и за први и за други термин.

.. activecode:: console__counting_meeting_sol2_srp

    termini = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)

    br_prvi_termin = 0
    br_drugi_termin = 0
    for t in termini:
        if t == 1:
            br_prvi_termin += 1
        if t == 2:
            br_drugi_termin += 1
    print('За први термин је гласало', br_prvi_termin, 'а за други', br_drugi_termin, 'чланова тима.')

или, ако претпоставимо да су подаци "чисти", то јест да нема других вреднсоти осим 1 и 2:

.. activecode:: console__counting_meeting_sol3_srp

    termini = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)

    br_prvi_termin = 0
    br_drugi_termin = 0
    for t in termini:
        if t == 1:
            br_prvi_termin += 1
        else:
            br_drugi_termin += 1
            
    print('За први термин је гласало', br_prvi_termin, 'а за други', br_drugi_termin, 'чланова тима.')

У случају да подаци нису познати унапред него их треба уносити, могли бисмо да напишемо овакав програм:

.. activecode:: console__counting_meeting_sol4_srp

    n = int(input("Колико чланова тима је гласало: "))
    br_prvi_termin = 0
    for i in range(n):
        t = int(input("Унесите један глас: "))
        if t == 1:
            br_prvi_termin += 1
            
    br_drugi_termin = n - br_prvi_termin
    print('За први термин је гласало', br_prvi_termin, 'а за други', br_drugi_termin, 'чланова тима.')

На почетку овог програма учитавамо број гласова *n*, а затим користимо *for* петљу да *n* пута поновимо учитавање и бројање једног гласа.




.. questionnote::

    **Задатак - тестирање:** 
    
    Неколико људи је решавало тест познавања саобраћајних прописа, што је услов за излазак на практични део испита. Тест се сматра положеним ако је је број нетачних одговора мањи или једнак 3. 
    
    На почетку програма - скрипте су дати резултати тестирања једне групе кандидата (број нетачних одговора за сваку особу која је решавала тест). Довршите скрипту тако да исписује колико кандидата је положило тест.

.. activecode:: console__counting_test_srp

    netacnih = (2, 5, 1, 0, 4, 2, 7, 1)
    polozilo = 0

    # ovde dodajte naredbe koje nedostaju
    
    print(polozilo)
    
.. commented out
    
    polozilo = 0
    for x in netacnih:
        if x <= 3:
            polozilo += 1
    print(polozilo)



.. questionnote::

    **Задатак - базен** 
    
    Припрема се посета базену за групу деце. Сви који су нижи од 160 сантиметара могу да иду само у мањи у базен. Организатора интересује колико деце је ниже од 160 сантиметара, да би могао да планира групе.

    На почетку програма су дате висине деце. Допунити програм тако да исписује број деце ниже од 160 сантиметара.
    
.. activecode:: console__counting_swimmingpool_srp

    visine = (160, 161, 174, 149, 153, 160, 158, 182, 144)
    
    


.. questionnote::

    **Задатак - влажност** 
    
    У ботаничкој башти се код ретких и осетљивих врста једном дневно мери влажност земљишта. Влажност се изражава бројем од 0 до 1, а сматра се да су услови за развој биаљака добри када је влажност између 0.3 и 0.7 (укључујући и границе). 
    
    На почетку програма - скрипте су дате влажности измерене током неког периода. Довршити скрипту тако да исписује број дана када влажност није била добра.

.. activecode:: console__counting_humidity_srp

    vlaznosti = (0.2, 0.5, 0.61, 0.40, 0.72, 0.51, 0.43, 0.35, 0.28)
    


Сумирање
--------

У једној великој групи практичних проблема до резултата долазимо тако што га постепено градимо (накупљамо) током пролажења кроз податке. На пример, ако нам је потребан збир неких бројева, до њега можемо да дођемо на овај уопштени начин:

.. code::

    zbir = 0
    for podatak in kolekcija:
        zbir += podatak
    print(zbir)

Када нам треба збир свих елемената колекције, исти резултат добијамо и позивом функције *sum*:

.. code::

    print(sum(kolekcija))

Постепено формирање резултата ћемо користити када нам од елемената из колекције требају само неки, то јест они који испуњавају задати услов. У том случају, поступак за рачунање збира би уопштено изгледао овако:

.. code::

    zbir = 0
    for podatak in kolekcija:
        if (podatak ispunjava uslov):
            zbir += podatak
    print(zbir)

Да бисмо добили средњу вредност података који испуњавају неки услов, потребно је пребројати и сабрати такве податке, а онда њихов збир поделити њиховим бројем. У општем случају то изгледа овако:

.. code::

    zbir = 0
    brojac = 0
    for podatak in kolekcija:
        if (podatak ispunjava uslov):
            zbir += podatak
            brojac += 1
    print(zbir / brojac)

Примери и задаци
''''''''''''''''

.. questionnote::

    **Пример - Просечан резултат IQ теста:** 
    
    Дати су резултати IQ теста за групу људи. Резултат -1 значи да особа није радила тест. Довршити програм тако да исписује средњу вредност добијену на тестирању.

.. activecode:: console__accumulate_IQ_srp

    iq_rezultati = (-1, 98, 115, -1, 83, 130, 101, 122, -1, 108)

Програм можемо да напишемо овако:

.. activecode:: console__accumulate_IQ_sol_srp

    iq_rezultati = (-1, 98, 115, -1, 83, 130, 101, 122, -1, 108)
    broj_testiranih = 0
    zbir_rezultata = 0
    
    for rez in iq_rezultati:
        if rez != -1:
            zbir_rezultata += rez
            broj_testiranih += 1

    if broj_testiranih > 0:
        srednji_iq = zbir_rezultata / broj_testiranih
        print('Средњи IQ је', srednji_iq)
    else:
        print('Нико није тестиран.')


.. questionnote::

    **Задатак - дежурства:**  
    
    У предузећу Х сви запослени повремено остају на дежурству. Норма за претходни период је 20 сати дежурства. Сваки сат дежурства преко норме се плаћа по посебном ценовнику. Дат је број сати дежурства за сваког запосленог, а директор жели да зна колико је укупно било сати дежурства преко норме.
    
    Довршити програм тако да исписује укупан број прековремених сати дежурства.
    
Ако сто добро решили задатак, за дате податке треба да добијете резултат 25, јер је :math:`(21-20)+(23-20)+(34-20)+(25-20)+(22-20)=25`.

.. activecode:: console__accumulate_overtime_srp

    norma = 20
    radni_sati = (21, 23, 19, 34, 25, 22, 17)
    ukupno_preko = 0
    # dovrsite program
    
    print('Укупан број прековремених сати је', ukupno_preko)
    
.. commented out
    
    norma = 20
    radni_sati = (21, 23, 19, 34, 25, 22, 17)
    ukupno_preko = 0
    for sati in radni_sati:
        if sati > norma:
            ukupno_preko += (sati - norma)
    print('Укупан број прековремених сати је', ukupno_preko)






.. questionnote::

    **Задатак - просечан принос:**  
    
    У једном воћњаку после треће године се прати принос шљиве по стаблу. Стабла са приносом испод 3 килограма се сматрају оштећеним или оболелим и биће извађена. 
    
    Дат је принос свих стабала у воћњаку. Довршити програм тако да израчунава и исписује просечан принос здравих стабала (са приносом од 3 и више килограма).
    
За дате податке треба да добијете реултат приближно 14.757 .
    
.. activecode:: console__accumulate_yield_srp

    prinosi = (11.3, 15.8, 9.5, 2.6, 21.1, 13.4, 17.9, 0.7, 14.3)
    
    # dovrsite program
