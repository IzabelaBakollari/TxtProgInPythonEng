Дефинисање функција
===================

У делу посвећеном управљању Карелом смо поменули да групу наредби можемо да издвојимо у засебну целину, која се зове функција. Подсетимо се како у општем случају изгледа функција написана на Пајтону:


.. activecode:: Console__functions__function_def_srp
    :passivecode: true

    def ime_funkcije(lista_argumenata):
        naredba_1
        ...
        naredba_k
        
За писање функција на Пајтону важе следећа правила:

.. infonote::

    **Правила писања функције:**

    - Као *ime_funkcije* може да се појави било које правилно написано име (правила су иста као за имена променљивих)
    - Као *lista_argumenata* може да се појави празна листа (ништа) ако функција не користи аргументе, или један или више аргумената раздвојених зарезима.
    - У телу функције (*naredba_1*, ... *naredba_k*) могу да се појаве било које наредбе језика Пајтон. Ове наредбе се пишу увучено у односу на ред који садржи име и аргументе функције.
    
Функције могу а не морају да врате неку вредност. До сада смо имали прилике да видимо и једну и другу врсту функција. На пример, функције помоћу којих се робот Карел помера напред, окреће, узима и оставља лоптице су све функције које не враћају вредност. Са друге стране, математичке функције попут *abs* или *round*, као и функције помоћу којих проверавамо да ли Карел има лоптица код себе, да ли има лоптица на пољу и да ли Карел може да иде напред су функције које враћају вредност.

Писање функција које враћају вредност
-------------------------------------

Да би нека функција вратила вредност, потребно је да се у телу функције бар једном наведе наредба ``return``, у којој се иза речи *return* наводи израз чију вредност функција треба да врати. 

.. activecode:: console__functions_return_example_srp

    def kvadrat(x):
        return x * x
    
    print(kvadrat(3))

Наредба *return* може да се појави на више места у функцији (са различитим вредностима), а обавезно се наводи на крају тела функције. Функција *abs*, да није уграђена, могла је бити дефинисана овако:

.. activecode:: console__functions_def_abs_srp
    :passivecode: true

    def abs(x):
        if x > 0:
            return x
        else:
            return -x
    

Функција може да врати и више од једне вредности. Таква је, на пример, уграђена функција *divmod*, која враћа два броја - резултат целобројног дељења и остатак. Функцију *divmod* користимо исто као и функције које враћају једну вредност, само враћене вредности смештамо у више променљивих:

.. activecode:: console__functions_divmod_example_srp

    kol, ost = divmod(813, 10)
    print('Количник је', kol, 'а остатак', ost)

Када пишемо функције које враћају више вредности, довољно је да после речи *return* наведемо вредности које враћамо, раздвојене зарезима. Када би требало да сами дефинишемо функцију *divmod*, могли бисмо да је напишемо овако:

.. activecode:: console__functions_divmod_def_srp
    :passivecode: true

    def divmod(a, b):
        return a // b, a % b

Пример
''''''

.. questionnote::

    **Пример - кречење:** 
    
    За кречење :math:`1м^{2}` зида потребно је око :math:`0.5кг` боје. Написати функцију која као аргументе прихвата следећа 4 аргумента:

    - дужину собе
    - ширину собе
    - висину собе
    - дужину која се не кречи (збирна ширина врата, прозора, плакара и слично)

    Функција треба да врати количину боје (у килограмима), потребне за кречење зидова и плафона.
    
    После фунцкције написати и програм који учитава податке за 5 различитих просторија, а затим користећи написану функцију израчунава и исписује укупну количину потребне боје за кречење свих пет просторија.
    
.. activecode:: console__functions_paint2_srp


    def kolicina_boje(a, b, h, ne_boji_se):
        pokrivnost = 0.5 # koliko kilograma za kvadratni metar
        plafon = a*b
        zidovi = h * (2*a + 2*b - ne_boji_se)
        za_krecenje = plafon + zidovi
        return za_krecenje * pokrivnost
        
    ukupno_boje = 0
    for i in range(5):
        s = input('Унесите дужину, ширину и висину собе, и дужину која се не кречи').split()
        ukupno_boje += kolicina_boje(float(s[0]), float(s[1]), float(s[2]), float(s[3]))

    print("Потребно је укупно", ukupno_boje, "килограма боје.")  


Задаци за вежбу:
''''''''''''''''

.. questionnote::

    **Задатак - Географске координате у облику за GPS**
    
    Нашли сте стару мапу закопаног блага и са ње очитали координате блага у степенима, минутима и секундама, али ваш GPS уређај подржава само географске координате као реалне бројеве степени. 
    
    Напишите програм који за дату координату у степенима, минутима и секундама исписује реалан број степени.

Програм је скоро сасвим написан. Потребно је још додати израз за рачунање реалног броја степени. Да бисмо (угловне) минуте претворили у степене, делимо их са :math:`60`, а секунде претварамо у степене дељењем са :math:`60 \cdot 60 = 3600`.

.. activecode:: console__functions_GPS_1_srp

   stepeni = int(input())
   minuti = int(input())
   sekunde = int(input())
   
   def st_min_sek_u_stepene(st, min, sek):
        # dovrsite funkciju
   
   realni_stepeni = st_min_sek_u_stepene(stepeni, minuti, sekunde)
   print(realni_stepeni)



.. questionnote::

    **Задатак - Географске координате у облику за стару мапу**
    
    Пошто сте схватили да је стара мапа из претходног задатка била нечија шала, решили сте да и ви некоме приредите сличну шалу. Изабрали сте место у близини и очитали координате са вашег GPS уређаја. Сада вам је потребно да координате са уређаја у реалним степенима претворите у целе степене, минуте и секунде, да бисте направили одговарајућу "стару" мапу. 
    
    Довршите започети програм који обавља ово претварање.


.. activecode:: console__functions_GPS_2_srp

    realni_st = float(input())
    def st_min_sek(realni_stepeni):
        # dopunite funkciju tako sto cete izracunati tri vrednosti
        # koje funkcija vraca (i nakon toga uklonite komentar is sledece linije koda)
        # return celi_stepeni, celi_minuti, cele_sekunde

    celi_st, celi_min, cele_sek = st_min_sek(realni_st)
    print(celi_st, celi_min, cele_sek)


.. commented out

    .. reveal:: console__functions_GPS_2_reveal_srp
       :showtitle: Прикажи решење
       :hidetitle: Сакриј решење

       Ево једног могућег решења:
               
       .. activecode:: console__functions_GPS_2_solution_srp

            realni_st = float(input())
            def st_min_sek(realni_stepeni):
                celi_stepeni = int(realni_stepeni)
                realni_minuti = (realni_stepeni - celi_stepeni) * 60
                celi_minuti = int(realni_minuti)
                realne_sekunde = (realni_minuti - celi_minuti) * 60
                cele_sekunde = round(realne_sekunde)
                return celi_stepeni, celi_minuti, cele_sekunde

            celi_st, celi_min, cele_sek = st_min_sek(realni_st)
            print(celi_st, celi_min, cele_sek)




.. questionnote::

    **Задатак - Водоинсталатер:** 
    
    Петар је водоинсталатер и за данас има планиране три интервенције. Петар ће за сваку интервенцију забележити када је почела и када се завршила, а на основу тих података треба израчунати колико времена је Петар укупно провео у интервенцијама.
    
    Дат је делимично написан програм који учитава време почетка и завршетка у сатима и минутима за сваку Петрову интервенцију, а затим одређује и исписује укупно време трајања свих интервенција. 
    
    **Допуните програм** тако што ћете написати функцију *trajanje(h1, m1, h2, m2)*, која израчунава колико укупно минута протекне од *h1* сати и *m1* минута до *h2* сати и *m2* минута;
    
.. activecode:: console__functions_plumber_srp

    # napisite funkciju trajanje

    def obradi_jednu_intervenciju():
        uputstvo = "Унесите сат и минут почетка и сат и минут завршетка интервенције "
        s1, s2, s3, s4 = input(uputstvo).split()
        h1, m1, h2, m2 = int(s1), int(s2), int(s3), int(s4)
        return trajanje(h1, m1, h2, m2)
        
    t1 = obradi_jednu_intervenciju()
    t2 = obradi_jednu_intervenciju()
    t3 = obradi_jednu_intervenciju()
    ukupno_minuta = t1 + t2 + t3
    broj_sati = ukupno_minuta // 60
    broj_minuta = ukupno_minuta % 60
    print ("Интервенције су трајале укупно", broj_sati, "сати и", broj_minuta, "минута")


Функције које не враћају вредност
---------------------------------

Функције које не враћају вредност само обављају неки посао и користимо их као наредбе. Такве су на пример биле функције *nazad()* или *uzmi_na_susednom_polju()*, које смо писали у делу посвећеном Карелу. Следе примери таквих функција у програму са текстуалним интерфејсом.

.. questionnote::

    **Пример - превоз:** 
    
    Члановима четворочлане породице је потребно редом 55, 35, 40 и 20 минута да стигну кући са места на којима се налазе, под условом да крену кући пре 16 часова. У противном им треба 15 минута више. 
    
    Написати програм који учитава време поласка у сатима и минутима за сваког члана породице и исписује време стизања кући.
    
Функција *obradi_clana_porodice* обавља све потребне радње за једног члана породице: учитава време поласка, на основу тог времена продужава трајање пута ако је потребно, израчунава и исписује време стизања кући. У главном програму је преостало само да се ова функција позове за сваког члана породице.

.. activecode:: console__functions_transport_srp

    def obradi_clana_porodice(koji, trajanje_puta):
        sat_polaska = int(input("У колико (целих) сати је пошао " + koji))
        minut_polaska = int(input("У колико минута је пошао " + koji))
        if sat_polaska >= 16:
            trajanje_puta = trajanje_puta + 15
        dolazak_u_minutima = sat_polaska * 60 + minut_polaska + trajanje_puta
        sat_dolaska = dolazak_u_minutima // 60
        minut_dolaska = dolazak_u_minutima % 60
        print(koji, "је стигао кући у", sat_dolaska, "сати и", minut_dolaska, "минута.")
        
    obradi_clana_porodice("први", 55)
    obradi_clana_porodice("други", 35)
    obradi_clana_porodice("трећи", 40)
    obradi_clana_porodice("четврти", 20)




Задаци за вежбу:
''''''''''''''''

.. questionnote::

    **Задатак - попуст:** 
    
    Један произвођач нуди робу по цени од 100 динара за комад, а за поруџбине од 50 и више комада одобрава попуст од 10%. Неколико купаца се најавило да долазе да купе одређени број комада. Имена купаца и тражене количине су дати на почетку програма.

    Написати функцију која за дато име купца и количину робе исписује колико тај купац треба да плати.

Име купца се овде прослеђује функцији само ради исписивања. Цена робе се рачуна на основу количине, која се прослеђује фукнцији као други аргумент. 

.. activecode:: console__functions_discount_srp

    # definisite funkciju ispisi_cenu

    kupci = ('Горан', 'Здравко', 'Маја', 'Радомир')
    kolicine = (70, 28, 150, 6)
    n = len(kupci)
    for i in range(n):
        ispisi_cenu(kupci[i], kolicine[i])

.. commented out

    # ovo je bila funkcija sa vise naredbi return (ovde takav primer nedostaje)

    def ispisi_cenu(ime, kolicina):
        cena_za_komad = 100.0
        if kolicina < 50:
            cena = cena_za_komad * kolicina
        else:
            cena = 0.90 * cena_za_komad * kolicina
        print(ime, 'треба да плати', cena)

.. questionnote::

    **Задатак - подвлачење текста:**

    Написати функцију *podvuci(tekst)*, која задати текст приказује подвучено. 
    
**Помоћ:** Функција *podvuci* треба да се састоји од само две *print* наредбе. У првој се исписује дати текст, а у другој линија. Стринг који садржи линију можете да добијете множењем стринга ``'-'`` дужином датог стринга.


.. activecode:: console__functions_underlined_text_srp

    # napisite funkciju podvuci
    
    podvuci("Из Целзијуса у Фаренхајте:")
    for c in range(15, 46, 5):
        print(c, '°C =', round(c * 9 / 5 + 32, 1), '°F.')
    print()
    
    podvuci("Из Фаренхајта у Целзијусе:")
    for f in range(50, 111, 10):
        print(f, '°F =', round((f-32) * 5 / 9, 1), '°C.')

.. commented out

    def podvuci(tekst):
        print(tekst)
        print('-' * len(tekst))

~~~~

Поменимо на крају неке од користи које имамо од писања функција, које овде због краткоће наших примера и задатака нису могле да дођу до изражаја:

- Функције се у дугачким програмима често користе да растерете главни део програма и учине га краћим и лакшим за разумевање. Наши програми нису толико дугачки да би било потребно растерећивати главни део прорама, али показују како би то могло да се уради и са дужим програмима.
- Функције могу да нам помогну да избегнемо понављање истог или сличног кода у програмима. Понављање кода треба избегавати јер се такав код теже одржава - сваку измену треба унети на више места, што је заморно и подложно грешкама и пропустима.
- Када пишемо функције, омогућавамо другима да лакше употребе делове нашег кода. Написане функције се могу издвојити у посебан модул, који други програмери лако укључују у своје програме.
- Код веома великих програма, формирањем функција омогућавамо да се програм распореди у више фајлова, уместо једног огромног и непрегледног фајла.

