Основно о конзолским програмима
===============================

Писање из програма
------------------

Основни начин на који се програм обраћа кориснику је исписивање података на екран помоћу функције *print()*. У најједноставнијем случају, параметар функције *print()* је текст под наводницима:

.. activecode:: console__intro_hello

    print("Здраво свете!")

Овакав текст под наводницима се назива стринг. Стрингови се могу именовати, тако да касније у програму уместо целог текста под наводницима наводимо само име које смо том тексту придружили. 

.. infonote::

    Подсећамо, именовани простор у меморији рачунара, у коме се налази нека вредност називамо променљива. Вредност смештена у променљиву може бити број, текст, логичка вредност или нешто друго што ћемо успут упознати.

На пример, стрингу "Здраво свете!" је у следећем примеру додељено име *s*, односно тај стринг је смештен у променљиву *s*.

**Операције + и * са стринговима**

Поред (једноставне) употребе променљивих, следећи пример показује и неке операције са стринговима. Конкретно, знак + означава операцију надовезивања стрингова (често кажемо и да се стрингови сабирају, мислећи на надовезивање). Надовезивање стрингова је честа и стандардна операција у многим програмским језицима. 

Друга операција, представљена знаком * је специфична за Пајтон и ређе коришћена. То је операција понављања стринга дати број пута, дакле операција између стринга и броја. Ову операцију неформално често називамо множење стринга бројем.

.. activecode:: console__intro_hello_plus

    print("*" * 19)
    s = "Здраво свете!"
    print("** " + s + " **")
    print('*' * 19)    
    print()
    muzicka_tema = 'ту-ду, ' * 6 + 'тудуууууу' + 'ду' * 4
    print(muzicka_tema)
    
Узгред, можда ће и вама (или неком старијем поред вас) текст који исписује последњи ред програма зазвучати познато:

.. image:: ../../_images/console_tudu.jpg
  :width: 600px
  :align: center

**Приказивање наводника**

У претходном примеру смо неке текстове ставили под наводнике :code:`"..."`, а неке под апострофе :code:`'...'`. Као што се види из примера, наводници и апострофи се равноправно могу користити за формирање стрингова, једино је битно да се исти знак користи на почетку и на крају.

Ова могућност је посебно згодна када у тексту треба да се прикаже управо неки од тих знакова:

.. activecode:: console__intro_quotes1

    print("Да л' некo зна како се штампа апостроф?")
    print('Још неко упита: "А наводници?"')
    print('Један проверава: "' + "Је л' овако?" + '"')
    print('Други рече: "Јест' + '\'' + ', а може и овако."')
    
Наводници и апострофи могу да се наведу и директно у тексту ако се испред њих стави знак ``\\`` (бекслеш). И други посебни знаци (на пример сам бекслеш) могу да се прикажу навођењем ``\\`` испред знака.

.. code::

    print("Један проверава: \"Је л' овако?\"")
    print('Други рече: "Јест\', а може и овако."')

**Напомена**: верзија Пајтона која се овде користи није комплетна и не подржава све могућности стандардног Пајтона. Овај начин приказивања специјалних знакова неће увек добро радити у браузеру, али можете да га испробате у свом Пајтон окружењу.

Читање из програма
------------------

Да програми не би увек радили једну исту ствар, потребно је омогућити уношење података. То се (најчешће) ради помоћу функције *input()*. Ова функција такође (као и *print()*) приказује текст који јој се наведе као параметар, а враћа текст који корисник откуца на тастатури. У овом примеру ћемо тај текст само ставити у променљиве *s1* и *s2* и приказати на екрану.

.. activecode:: console__intro_input

    s1 = input('Напишите нешто, а после још нешто: ')
    s2 = input()
    print('Прво сте написали:', s1, 'а затим:', s2)

    
**Читање бројева**

Као што је речено, функција *input()* враћа ткест. То значи да уколико нам је потребан податак друге врсте, треба то да кажемо и да променимо врсту (тип) унетог податка. На пример ако желимо цео број, онда добијени текст треба да претворимо у цео број. Ево како се то ради у Пајтону:
    
.. activecode:: console__intro_int

    s = input('Унесите цео број: ')
    print(s+s)
    s = int(s)
    print(s+s)   
    
Видимо да у првој наредби ``print(s+s)`` долази до надовезивања (сабирања) стрингова, јер је вредност у променљивој *s* текст. На пример, ако сте унели '2', добићемо '2'+'2' што је '22'. Израз ``int(s)`` текстуалну вредност претвара у бројчану. Тако, наредбом ``s = int(s)`` у променљиву *s* смештамо бројчану вредност, па следећи знак + означава сабирање бројева.

За реалан број само уместо *int* треба писати *float*. На пример, ако желимо да учитамо реалан број и испишемо двоструко већи број, програм може да изгледа овако:

.. activecode:: console__intro_float1

    s = input('Унесите реалан број: ')
    a = float(s)
    print(2*a)

Пошто су input(), float() i print() функције, можемо да скратимо програм и позив једне функције пишемо као параметар друге.

.. activecode:: console__intro_float2

    a = float(input('Унесите реалан број: '))
    print(2*a)

Програм се на овај начин може још више скратити и свести на само један ред:

.. activecode:: console__intro_float3

    print(2 * float(input('Унесите реалан број: ')))

Ипак, при овом скраћивању не треба претеривати и учинити програм тешко читљивим.

Итерабле
--------

У претходним поглављима смо често користили *for* наредбу. До сада је то увек било у облику 

.. code::

    for i in range(n):
        ...
      
При томе се уместо *i* могла појавити и нека друга променљива, а уместо *n* је начешће стајао конкретан цео број. Објаснили смо да запис :code:`range(n)` представља опсег бројева :code:`0, 1, 2, ... n-1`. На пример, следећи програм исписује вредност *i* за свако *i* од 0 до (закључно са) 4:

.. activecode:: console__intro_iter1

    for i in range(5):
        print(i)

Променљива *i* може да узима и вредности задате на другачији начин, а не само опсегом. Те вредности могу да буду на пример слова (знакови, карактери) једног стринга, или бројеви наведени у листи (о листама ће бити више речи у наредним поглављима):

.. activecode:: console__intro_iter2

    for i in 'ABC':
        print(i)
        
    print()
    
    for i in [2.7, 5.11, 3.29]:
        print(i)

Опсег *range(5)*, стринг 'ABC' и листа [2.7, 5.11, 3.29] имају заједничку особину да променљива може да узима редом вредности из некаквог списка вредности који ти објекти представљају, односно променљива може да итерира кроз тај списак вредности.

.. infonote::

    Сваки објекат кроз који може да се итерира, односно објекат коме можемо задатим редом да дохватамо вредности из неког коначног скупа, називамо **итерабилан објекат** или **итерабла**. 
    
Претходно наведени опсег, стринг и листа су примери итерабли. Поред ових итерабли, постоје и друге које ћемо успут упознати.
    
**Унос више бројева**

У случају да унети текст садржи само један цео број, можемо да пишемо и кратко:

.. code::

    a = int(input())

Ако програм треба да прихвати два цела броја, најједноставније је да поновимо исту наредбу два пута:

.. code::

    a = int(input())
    b = int(input())

Овакав начин прихватања података подразумева да корисник после сваког броја притисне ``Enter``, односно ако се ишчитавају унапред припремљени подаци, да се они налазе у два одвојена реда.

Понекад ће нам бити потребно (или удобније) да прихватимо више бројева у једном реду. За растављање унетог текста на низ (талније листу) мањих стрингова користимо функцију *split()*. Параметар функције *split()* је знак или текст који желимо да користимо као раздвајач (сепаратор). Ако не наведемо сепаратор, подразумева се размак.

На пример, ако се у једном реду очекује унос два цела броја раздвојена размаком, да бисмо та два броја сместили у променљиве *a* и *b*, можемо да искористимо било који од следећих сегмената кода:

.. code::

    s = input()
    s1, s2 = s.split()
    a = int(s1)
    b = int(s2)

.. code::

    s1, s2 = input().split()
    a, b = int(s1), int(s2)

Касније ћемо видети неке још краће начине да учитамо два или више целих бројева, унетих као један ред текста.

Функција *split()* враћа листу, па можемо да кажемо да је резултат ове функције једна итерабла. То значи да кроз резулатат функције *split()* можемо да итерирамо и помоћу *for* наредбе (тада чак не морамо ни да знамо колико има вредности у листи).

Понекад је размак део текста и не желимо да се текст на том месту раставља. Тада као сепаратор користимо неки други знак. У следећем примеру као сепаратор користимо зарез и пишемо :code:`split(',')` уместо :code:`split()`. У том случају може да се догоди да поједини елементи добијене листе почињу или завршавају размаком који није пожељан (желимо да сачувамо само размаке у средини). Размаке на почетку и крају стринга можемо да уклонимо помоћу функције *strip()*. Ова функција враћа стринг без водећих и завршних размака.

.. infonote::

    У Пајтону није могуће мењати стрингове. Могуће је само на основу стринга израчунати нови, можда сличан стринг.
    
.. activecode:: console__intro_split_1

    recenica = "Ужице,   Сремска   Митровица,   Прокупље"
    recenica = recenica.split(',')
    for rec in recenica:
        print(rec)
        
    print()
    
    for rec in recenica:
        print(rec.strip())

**Функција map()**

Као што смо видели, функција *split()* је врло корисна када треба издвојити неколико бројева из једног стринга (једног реда текста). Било би још згодније када не бисмо морали да именујемо сваки елемент итерабле коју нам враћа функција *split()*, и сваки од тих елемената да претварамо у број.

У Пајтону постоји уграђена функција map(), која као своја два аргумента прима једну функцију и једну итераблу, а враћа нову итераблу. Резултујућа итерабла се добија када се на сваки елемент дате итерабле примени дата функција.

На пример, када помоћу функције *split()* раставимо неки стринг (најчешће учитани текст) на делове, често желимо да на сваки део применимо функцију *int*. Начин који смо већ видели је:

.. activecode:: console__intro_map1

    pet_brojeva = "2 3 5 7 4"

    s1, s2, s3, s4, s5 = pet_brojeva.split()
    a, b, c, d, e = int(s1), int(s2), int(s3), int(s4), int(s5) 

    print(a+b+c+d+e)

а исто то помоћу функције *map* изгледа овако:

.. activecode:: console__intro_map2

    pet_brojeva = "2 3 5 7 4"

    a, b, c, d, e = map(int, pet_brojeva.split())

    print(a+b+c+d+e)
    


Контролисано исписивање
-----------------------

**Више исписивања у једном реду**

У скоро свим претходним примерима сте могли да приметите да свака *print()* функција исписује текст у посебном реду. То је тако јер *print()* функција, ако јој се не каже другачије, на крај исписа додаје специјалан знак за прелазак у нови ред. Ово подразумевано понашање се може променити навођењем *end = '...'*, где уместо тачкица треба да стоји оно што желимо да буде приказано на крају реда, на пример један размак. Ако не желимо ништа на крају реда, треба навести *end = ''*. На пример, ако податке исписујемо у петљи, а желимо да их прикажемо све у једном реду, можемо да пишемо:

.. activecode:: console__intro_endprint

    print('Zbir brojeva ', end = '')
    for i in range(5):
        print(i, end = ' ')
        
    print('je 10')    

**Раздвајање делова исписа**

Параметри (делови текста) наведени у функцији *print()* се при испису раздвајају размацима. То је још једно подразумевано понашање функције *print()*. На пример, између бројева и знакова ``+`` и ``=`` се појављује по један размак:

.. activecode:: console__intro_sep_1

    s1, s2, s3 = input("Унесите три броја: ").split()
    a, b, c = int(s1), int(s2), int(s3)
    print(s1, "+", s2, "+", s3, "=", a+b+c)
    
И ово понашање функције *print()* се може променити. Знак или текст који користимо за раздвајање при испису, можемо да наведемо као именовани параметар *sep*, то јест пишемо: :code:`sep = '...'`, при чему уместо тачкица пишемо знак(е) за раздвајање. Ако желимо да исписани делови буду спојени, пишемо: :code:`sep = ''`.

.. activecode:: console__intro_sep_2

    s1, s2, s3 = input("Унесите три броја: ").split()
    a, b, c = int(s1), int(s2), int(s3)
    print(s1, "+", s2, "+", s3, "=", a+b+c, sep = '')

**Форматирано исписивање**

Још детаљнија контрола начина исписивања може се постићи такозваним форматираним исписом. Унутар текста под наводницима можемо да оставимо место за изразе (променљиве су такође изрази, при томе врло једноставни) и да прецизније опишемо како тачно да буду исписани ти изрази. Место за стринг се задаје писањем "%s", за цео број писањем "%d", а за реалан број "%f". Након оваквог текста се пише још један знак ``%`` и затим у заградама стварне вредности раздвојене зарезима. Тако последњу наредбу у претходном примеру можемо да заменимо са: 

.. code::

    print("%s+%s+%s=%d" % (s1, s2, s3, a+b+c))
    
или са:

.. code::

    print("%d+%d+%d=%d" % (a, b, c, a+b+c))

Када се у текст умеће само једна вредност, она се не мора писати у заградама. На пример, при исписивању стихова Душка Радовића, реч ``glagol`` се у четвртом и петом реду програма не пише у заградама:

.. activecode:: console__intro_formatted_print

    print('Коњ И Сан')
    for glagol in ('има', 'јаше', 'је пао са'):
        print()
        print('Неко сања да %s коња' % glagol)
        print('а неко %s коња.' % glagol)
        
    print()    
    print('Неко се пробудио када је пао')
    print('а неко је устао и поново узјахао.')

