Колекције података
==================

У претходној лекцији смо употребили торку вредности да бисмо помоћу *for* петље обавили неке наредбе (рачунање и исписивање) над сваком вредношћу из торке. 

Торке су такође тип података у Пајтону, као што су то бројеви, стрингови или логичке вредности. Типови *int* (цео број), *float* (реалан број), *str* (стринг) и *bool* (логичка вредност) су **основни типови**. Разлика између торки и основних типова је у томе што се вредност торке састоји од више вредности једноставнијег типа.

Сваку вредност која се састоји од више вредности једноставнијег типа зваћемо **колекција**. Податке од којих се колекција састоји зовемо **елементи колекције**. 

Можемо рећи да је торка једна врста колекције, и то је прва врста колекције са којом се сусрећемо.

Торка и њени елементи
---------------------

Паковање и распакивање торки
''''''''''''''''''''''''''''

Целу торку можемо да сместимо у променљиву, као што то радимо и са вредностима простијег типа. У следећем примеру, променљива *temperature* садржи целу торку као своју вредност.

.. activecode:: console__collections_tuple1_srp
    
    temperature = (25, 24, 25, 23, 25, 25)
    for t in temperature:
        print(t)
        
Овакво додељивање вредности (као у првој линији програма) зовемо и паковање торке. Могућа је и обрнута додела: када знамо колико торка има елемената, можемо да елементе торке доделимо одговарајућем броју променљивих:

.. activecode:: console__collections_tuple2_srp
    
    puno_ime = ("Милан", "Јовановић", "Батут")
    ime, prezime, nadimak = puno_ime
    print(ime)
    print(prezime)
    print(nadimak)
    
Кажемо да се у наредби ``ime, prezime, nadimak = puno_ime`` врши распакивање торке.

Исти ефекат има и сродна наредба 

.. code::
    
    ime, prezime, nadimak = "Милан", "Јовановић", "Батут"
    
У овој наредби се торке и не појављаују, па овде говоримо о вишеструком додељивњу вредности.

Елементи и индекси торке
''''''''''''''''''''''''

Елементе торке можемо да добијемо и тако што напишемо име торке, а иза њега у угластим заградама редни број елемента који желимо. Овде треба запамтити да бројање елемената било које колекције почиње од нуле. На пример:

.. activecode:: console__collections_index_srp

    osnovne_boje = ("Црвена", "Зелена", "Плава")
    print(osnovne_boje[0])
    print(osnovne_boje[1])
    print(osnovne_boje[2])

Редни број елемента се још назива и **индекс** елемента. За торку од *n* елемената као индексе можемо да користимо бројеве 0, 1, 2, ... *n-1*. У примеру горе је *n* = 3, па су дозвољени индекси 0, 1 и 2. Покушај да употребимо неки индекс ван ових граница проузрокује грешку (можете да испробате ово).


Дужина торке
''''''''''''

Број елемената торке можемо да добијемо помоћу функције *len*. 

.. activecode:: console__collections_len1_srp
    
    osnovne_boje = ["Црвена", "Зелена", "Плава"]
    n = len(osnovne_boje)
    print(n)
    
или краће:

.. activecode:: console__collections_len2_srp
    
    print(len(("Црвена", "Зелена", "Плава")))
    
Обратите пажњу на двоструке заграде (једне због функције, а друге због торке).

Кроз ове примере смо видели да елементи торке могу да буду бројеви или стрингови. У ствари, елементи торке могу бити било којег типа, основног или сложенијег.

Дозвољено је на пример правити торку торки: 


.. activecode:: console__collections_len3_srp
    
    t = ((11, 12, 13), (21, 22, 23))
    print(len(t))


.. commented out

    t2 = ((1, 2, 3), ) # poslednji zarez je bitan
    print(len(t2))
    
Торка *t* садржи две једноставније торке, зато је број њених елемената 2.

У Пајтону је дозвољено да елементи торке буду различитог типа и ускоро ћемо видети и такве примере.

Опсег
-----

Опсег (енгл. range) је још једна врста колекције. За разлику од торке, елементи ове колекције су увек цели бројеви. 

Опсег може да се зада на више начина.

Опсег са једним аргументом
''''''''''''''''''''''''''

Најједноставнији облик задавања опсега је *range(n)*, где је *n* неки цео позитиван број. Опсег *range(n)* садржи целобројне вредности од 0 до *n*, не укључујући *n*. На пример, *range(5)* садржи вредности 0, 1, 2, 3, 4. 

.. activecode:: console__collections_range_n_i_srp
    
    for i in range(5):
        print(i)
        
Видимо да у *for* наредби можемо да користимо опсег на исти начин као и торку. У ствари, на месту торке или опсега може да стоји било која колекција.

Пошто опсег *range(n)* садржи укупно *n* вредности, овако задат опсег се често користи када неку наредбу треба само поновити *n* пута на исти начин:

.. activecode:: console__collections_range_n_srp
    
    for i in range(5):
        print("Здраво!")

Наредба *print* је извршена за сваку вредност *i* из секвенце 0, 1, 2, 3, 4, али у овом примеру се те вредности не користе у телу петље. Тако смо постигли да се наредба *print* изврши 5 пута на потпуно исти начин, то јест да се понови 5 пута. 

Друга честа употреба оваквог опсега је да помоћу њега прођемо кроз све елементе торке. Овакав начин пролажења кроз вредности торке је погодан када нам осим тих вредности у петљи требају и њихови редни бројеви (овакав начин пролажења кроз колекцију је чешћи у другим програмским језицима него у Пајтону).

.. activecode:: console__collections_for_range_len_srp
    
    boje = ["Црвена", "Зелена", "Плава", "Жута", "Циклама"]
    n = len(boje)
    for i in range(n):
        print('Боја бр.', i, 'је', boje[i])




Опсег са два аргумента
''''''''''''''''''''''

Када нам је потребна секвенца узастопних целих бројева која не почиње нулом, опсег задајемо као *range(a, b)*, где су *a* и *b* цели бројеви, такви да је :math:`a<b`. Тада секвенцу чине цели бројеви од *a* до *b*, не укључујући *b*. На пример, опсег *range(1, 6)* даје секвенцу бројева 1, 2, 3, 4, 5:

.. activecode:: console__collections_range_a_b_srp
    
    for i in range(1, 6):
        print(i)

Опсег са три аргумента
''''''''''''''''''''''

Трећи облик задавања опсега има три аргумента:

.. activecode:: console__collections_range_a_b_c_srp
    
    for i in range(2, 12, 2):
        print(i)

Вредности опсега задатог са *range(a, b, c)* иду од *a* до *b* (не укључујући *b*) са кораком *c*, тј. мењајући се за по *c*. Корак *c* може да буде и негативан:

.. activecode:: console__collections_range_a_b_cneg_srp
    
    for i in range(12, 2, -2):
        print(i)


Опсег можемо да конвертујемо у торку (обрнуто није могуће, нити је потребно):

.. activecode:: console__collections_range_to_tuple_srp
    
    a = tuple(range(2, 12, 2))
    print(len(a))


Стринг као колекција
--------------------

Стрингове смо до сада користили као основни тип, али стрингови могу да се користе и као колекције појединачних карактера. Можемо да пролазимо кроз карактере стринга помоћу петље и да дохватамо поједине каратере користећи индексе:

.. activecode:: console__collections_str_as_collection_srp
    
    s = 'tekst'
    print(s[1], s[2])
    for c in s:
        print(c)



Функције над колекцијама
------------------------

У Пајтону постоје многе функције које као аргумент прихватају колекцију. Једна од њих је функција *len*, коју смо већ упознали. Још неке често коришћене функције које се примењују над колекцијама су:

- *sum*, која даје збир елемената колекције
- *min*, која даје најмањи елемент колекције
- *max*, која даје највећи елемент колекције

.. activecode:: console__collections_aggregation_srp
    
    print('Торка:')
    t = (2, 8, 4, 15, 3)
    print('len(t) =', len(t))
    print('sum(t) =', sum(t))
    print('min(t) =', min(t))
    print('max(t) =', max(t))

    print('Опсег:')
    r = range(1, 10, 2)
    print('len(r) =', len(r))
    print('sum(r) =', sum(r))
    print('min(r) =', min(r))
    print('max(r) =', max(r))

    print('Стринг:')
    s = 'Python'
    print('len(s) =', len(s))
    print('sum(s) =', sum(s))
    print('min(s) =', min(s))
    print('max(s) =', max(s))

Вредности функција *len*, *sum*, *min*, *max* за опсег можемо да одредимо и из параметара опсега, али овде смо хтели да истакнемо да поменуте функције прихватају различите колекције као свој аргумент.

Питања
''''''

.. mchoice:: console__collections_quiz_tuple_unpack_srp
   :answer_a: долази до грешке у програму
   :answer_b: 2
   :answer_c: 20
   :answer_d: 3
   :correct: c
   :feedback_a: Покушај поново
   :feedback_b: Покушај поново
   :feedback_c: Тачно
   :feedback_d: Покушај поново

   Шта исписује следећи програм?
   
   .. code::
   
       t = (32, 41, 20, 17)
       a, b, c, d = t
       print(c)

.. mchoice:: console__collections_quiz_tuple_index_srp
   :answer_a: 1
   :answer_b: 2
   :answer_c: долази до грешке у програму
   :answer_d: 3
   :correct: b
   :feedback_a: Покушај поново
   :feedback_b: Тачно
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Шта исписује следећи програм?
   
   .. code::
   
       a = (1, 2, 3)
       print(a[1])


.. mchoice:: console__collections_quiz_range1_srp
   :answer_a: range(4)
   :answer_b: range(1, 4)
   :answer_c: range(3)
   :answer_d: range(1, 3)
   :correct: b
   :feedback_a: Покушај поново
   :feedback_b: Тачно
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Који опсег садржи вредности 1, 2, 3 ?

.. mchoice:: console__collections_quiz_range2_srp
   :answer_a: 5
   :answer_b: 6
   :answer_c: 9
   :answer_d: 10
   :correct: a
   :feedback_a: Тачно
   :feedback_b: Покушај поново
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Колико вредности садржи опсег range(1, 10, 2) ?

.. dragndrop:: console__collections_quiz_range_len_srp
    :feedback: Покушај поново!
    :match_1: 5|||range(5)
    :match_2: 0|||range(3, 3)
    :match_3: 3|||range(1, 4)
    :match_4: 1|||range(3, 6, 3)

    Упарите опсеге са бројем елемената.


.. dragndrop:: console__collections_quiz_range_values_srp
    :feedback: Покушај поново!
    :match_1: 3, 4, 5|||range(3, 6)
    :match_2: 0, 1, 2|||range(3)
    :match_3: 3, 1|||range(3, -1, -2)
    :match_4: 3, 2, 1, 0, -1|||range(3, -2, -1)
    :match_5: 3|||range(3, 6, 3)

    Упарите опсеге са вредностима.
