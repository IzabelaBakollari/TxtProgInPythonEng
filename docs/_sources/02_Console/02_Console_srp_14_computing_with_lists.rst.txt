Рачунање са листама
===================

Овде ћемо још мало увежбавати рад са листама и комбинавање техника које смо до сада научили.


.. questionnote::

    **Задатак - најмањи позитиван број**
    
    Дата је торка бројева. Исписати најмањи позитиван број из те торке.

Овај задатак је комбинација задатака какве смо радили до сада. У првом делу задатка у листу копирамо позитивне бројеве из торке, а у другом делу примењујемо функцију *min* на листу позитивних бројева. 

.. activecode:: console__list_min_positive_srp

    a = (-4, 3, 4, -3, 5, 6, 2, -5)
    poz = []
    for x in a:
        if x > 0:
            poz.append(x)

    print(min(poz))

Поменули смо да функције *min*, *max*, *sum*, *len* могу да се примене различите колекције и показали смо то на примерима торке и опсега. Сада видимо да функција *min* прихвата и листу као свој аргумент. Исто важи и за функције *max*, *sum*, *len*.





.. questionnote::

    **Пример - кварови**
    
    У једној фабрици има 10 машина и оне су представљене бројевима од 0 до 9. За сваки квар који је настао бележи се број машине која се кварила. Ови бројеви су дати у торки на почетку скрипте.

    Напишите програм који исписује колико је пута свака од машина неисправно функционисала, а затим и бројеве машина које се нису ни једном поквариле.

   
.. activecode:: console__list_malfunctions_srp

    kvarovi = (0, 2, 1, 3, 2, 4, 2, 6, 4, 7, 4, 8)

Први део задатка захтева да пребројимо колико пута се сваки број појављује у улазним подацима. Да бисмо решили тај део задатка, правимо низ *br_kvarova* од 10 елемената, у коме сваки елемент одговара једној машини и броји њене кварове.

.. code::
    
    br_kvarova = [0] * 10
    for masina in kvarovi:
        br_kvarova[masina] += 1

Након тога за сваку машину исписујемо колико је имала кварова. Овде користимо опсег јер желимо да за сваку машину поред броја кварова испишемо и њен редни број:

.. code::

    for masina in range(10):
        print('Машина', masina, 'се кварила', br_kvarova[masina], 'пута.')

У другом делу задатка се тражи да испишемо бројеве машина које се нису квариле. То су машине којима је број кварова једнак нули. Пролазимо још једном кроз листу *br_kvarova* и индексе елемената једнаких нули убацујемо у листу *ispravne*:

.. code::

    ispravne = []
    for masina in range(10):
        if br_kvarova[masina] == 0:
            ispravne.append(masina)
            
На крају исписујемо елементе листе *ispravne*:

.. code::

    print('Машине које се нису квариле:')
    for masina in ispravne:
        print(masina)

Ево како изгледа цео програм:

.. activecode:: console__list_malfunctions_sol_srp

    kvarovi = (0, 2, 1, 3, 2, 4, 2, 6, 4, 7, 4, 8)
    br_kvarova = [0] * 10
    for masina in kvarovi:
        br_kvarova[masina] += 1

    for masina in range(10):
        print('Машина', masina, 'се кварила', br_kvarova[masina], 'пута.')

    ispravne = []
    for masina in range(10):
        if br_kvarova[masina] == 0:
            ispravne.append(masina)
            
    print('Машине које се нису квариле:')
    for masina in ispravne:
        print(masina)


.. questionnote::

    **Задатак - навијачи**

    Навијачи из 8 земаља долазе на турнир у град *X*. Организатори турнира желе да знају колико навијача долази из сваке од земаља.
    
    Свака земља је представљена бројем од 0 до 7. Дати бројеви за сваког навијача говоре из које земље он долази. Допунити програм који за сваку земљу исписује колико навијача долази из ње.

У задатку се тражи да се за сваки број од 0 то 7 преброји колико пута се тај број појављује межу датим бројевима. Део који недостаје је врло сличан бројању кварова из датог примера.

.. activecode:: console__list_counters_srp

    navijaci = (1, 2, 3, 2, 3, 0, 2, 4, 3, 5, 6, 4, 0, 5, 3, 7, 1, 6, 3)
    br_nav = [0] * 8
    for # dopunite
        # dopunite

    for zemlja in range(8):
        print('Из земље', zemlja, 'долази', br_nav[zemlja], 'навијача.')

.. commented out

    navijaci = (1, 2, 3, 2, 3, 0, 2, 4, 3, 5, 6, 4, 0, 5, 3, 7, 1, 6, 3)
    br_nav = [0] * 8
    for x in navijaci:
        br_nav[x] += 1

    for zemlja in range(8):
        print('Из земље', zemlja, 'долази', br_nav[zemlja], 'навијача.')




.. questionnote::

    **Задатак - највише навијача**
    
    Ово је наставак претходног задатка. Организатори сада додатно желе да знају из које земље долази највише навијача.
    
    Ископирајете претходни програм и допуните га тако да на крају исписује број земље из које долази највише навијача.

Ако исправно решите задатак, програм треба да испише број 3, јер се тај број начешће појављује међу подацима.

.. questionnote::

.. activecode:: console__list_max_counter_srp

    navijaci = (1, 2, 3, 2, 3, 0, 2, 4, 3, 5, 6, 4, 0, 5, 3, 7, 1, 6, 3)






.. questionnote::

    **Задатак - Највећи негативан број**

    Дата је торка бројева. Исписати највећи негативан број из те торке.

.. activecode:: console__list_max_negative_srp

    a = (-4, 3, 4, -3, 5, 6, 2, -5)







.. questionnote::

    **Задатак - Мале продаје**

    Дата торка садржи износе рачуна купаца у једној продајној мрежи. Све продаје са износом мањим од 500 се сматрају за мале продаје. Написати програм који израчунава укупан приход од свих малих продаја.

Овај задатак можете да решавате на два начина. Један је издвајање малих износа у посебну листу и примена функције *sum* на ту листу. Други начин је постепено грађење збира, као што смо то радили у лекцији о бројању и сумирању.

.. activecode:: console__list_sum_small_sales_srp

    prodaje = (158, 681, 249, 1250, 335, 5400, 455)


